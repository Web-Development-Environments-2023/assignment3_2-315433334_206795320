openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRegister'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "409":
          description: Username was taken
  /Login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLogin'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/lastWatchedRecipes:
    get:
      tags:
      - Users
      summary: Returns the last 3 recipes that the user has watched
      description: Get an array of 3 watched recipes by logged in user
      responses:
        "200":
          description: data about 3 recipes that the user watched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/watched:
    post:
      tags:
      - Users
      summary: Mark a recipe as watched by a user
      description: Mark a recipe as watched by a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepe_id:
                  type: string
                  description: Id of a reciepe that watched by a user 
                  example: 715538
      responses:
        "200":
          description: The recipe has been successfully saved as watched
        "400":
          description: Recipe ID is missing
      security:
      - cookieAuth: []
  /users/createARecipe:
    post:
      tags:
      - Users
      summary: Create a new by a user
      description: Create a new by a user
      requestBody:
        description: Item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createARecipe'
        required: true
      responses:
        "200":
          description: Your recipe has been successfully created!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "400":
          description: Invalid recipe supplied
        "401":
          description: user is not authorized  
  /users/userRecipes:
    get:
      tags:
      - Users
      summary: Returns all the user's recipes that he created 
      description: Get a JSON object that includes all the user's recipes
      responses:
        "200":
          description: data about the user's recipes
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/MyRecipePreview'
        "401":
          description: user is not authorized          
      security:
      - cookieAuth: []
  /users/myFamilyRecipes:
    get:
      tags:
      - Users
      summary: Returns all the user's family recipes 
      description: Get a JSON object that includes all the user's family recipes
      responses:
        "200":
          description: data about the user's family recipes
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/isFavorite:
    get:
      tags:
      - Users
      summary: Checks if a recipe is favorite by its id 
      description: Return a boolean for if a recipe is favorite by its id
      responses:
        "200":
          description: the recipe is/is not favorite
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/isWatched:
    get:
      tags:
      - Users
      summary: Checks if a recipe is watched by its id 
      description: Return a boolean for if a recipe is watched by its id
      responses:
        "200":
          description: the recipe is/is not watched
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []                
  /recipes/:recipeId:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully get the data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/random:
    get:
      tags:
      - Recipes
      summary: Return the details of 3 random recipes
      description: Get a JSON object that includes all details of 3 random recipes
      responses:
        "200":
          description: Successfully returned 3 random recipes
        "404":
          description: No recipes found 
  /recipes/search/:query:
    get:
      tags:
      - Recipes
      summary: Search a recipe by query
      description: Returns recipes based on the provided query and parameters
      operationId: searchRecipesByQuery
      parameters:
      - name: query
        in: path
        description: Query to search with
        required: true
        schema:
          type: string
          example: pasta
      - name: number
        in: path
        description: Number of recipes to return
        required: true
        schema:
          type: integer
          example: 10
      - name: cuisine
        in: path
        description: Type of cuisine to search for
        required: true
        schema:
          type: string
          example: Italian
      - name: diet
        in: path
        description: Type of diet to search for
        required: true
        schema:
          type: string
          example: Vegetarian
      - name: intolerance
        in: path
        description: Type of intolerance to search for
        required: true
        schema:
          type: string
          example: Gluten
      responses:
        "200":
          description: Successfully returned Recipes by the query
        "404":
          description: We couldn't find any results matching your search 
components:
  schemas:
    userRegister:
      type: object
      properties:
        user_name:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    userLogin:
      type: object
      properties:
        user_name:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        user_name: my_name
        password: my_name@12
      createARecipe:
        required:
          - title
          - imageUrl
        type: object
        properties:
          title:
            minLength: 3
            type: string
            description: Recipe name
            example: What to make for dinner tonight?? Bruschetta Style Pork & Pasta
          imageUrl:
            type: string
            description: URL of the recipe image
            format: URL
            example: https://spoonacular.com/recipeImages/715538-312x231.jpg
          readyInMinutes:
            type: integer
            description: Time required to prepare the recipe in minutes
            format: date-time
          popularity:
            type: integer
            description: Recipe popularity (number of likes)
          vegan:
            type: integer
            description: Indicates if the recipe is vegan (0 for no, 1 for yes)
          vegetarian:
            type: integer
            description: Indicates if the recipe is vegetarian (0 for no, 1 for yes)
          gluten_free:
            type: integer
            description: Indicates if the recipe is gluten-free (0 for no, 1 for yes)
          ingredients:
            minItems: 1
            type: array
            description: List of ingredients for the recipe
            items:
              type: string
          instructions:
            type: string
            description: Preparation instructions for the recipe
          servings:
            type: integer
            description: Number of servings the recipe yields
            format: int32
        description: Model containing recipe information
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false